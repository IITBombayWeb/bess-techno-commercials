# -*- coding: utf-8 -*-
"""Copy of Savings Calculation for PV+Batt+Grid.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ufkl4kiQS6ZkC3BeYc_T33Y-l6pp0mN1
"""

x = 0.012
CRF_b = 0.15
CRF_s = 0.11
Rg = 40
eta_c = 0.9
eta_dc = 0.95
eta = eta_c * eta_dc
T_s = 5
dy = 300
J = 20000
delta = 0.9
K = 35000
P_L = 40
R_s = CRF_s*K/(dy*T_s)



print(R_s)

"""# **Savings = a*P_s + b**"""

a = Rg*eta*T_s*dy - (((x+CRF_b)*J*eta_c*T_s + K*CRF_s*delta)/delta)
print(a/dy)

b = Rg*P_L*T_s*(1 - eta)*dy - R_s*P_L*T_s*dy + P_L*(((x+CRF_b)*J*eta_c*T_s + K*CRF_s*delta)/delta)
print(b/dy)

"""# **Plotting J vs P_s for S = 0**"""

import numpy as np
import matplotlib.pyplot as plt

x = 0.012
CRF_b = 0.15
CRF_s = 0.11
Rg = 11
eta_c = 0.9
eta_dc = 0.95
eta = eta_c * eta_dc
T_s = 5
dy = 300
delta = 0.9
K = 35000
P_L = 40
T_L = 10
R_s = CRF_s*K/(dy*T_s)

J = np.linspace(20000,40000,5)

R_b = ((CRF_b + x)*J*eta_c*T_s + delta*CRF_s*K)/(eta*delta*dy*T_s)
print(R_b)



a = Rg*eta*T_s*dy - (((x+CRF_b)*J*eta_c*T_s + K*CRF_s*delta)/delta)
b = Rg*P_L*T_s*(1 - eta)*dy - R_s*P_L*T_s*dy + P_L*(((x+CRF_b)*J*eta_c*T_s + K*CRF_s*delta)/delta)

P_s = -b/a

P_s_max = P_L*(T_L - T_s*(1 - eta))/(eta*T_s)

plt.plot(P_s, J, label = 'P_L = 40 kW')
plt.axvline(x = P_s_max)
plt.xlabel('Solar Capacity (in kW)')
plt.ylabel('Initial Cost of Battery per unit capacity (in Rs./kWh)')

# P_L = 100
# a = Rg*eta*T_s*dy - (((x+CRF_b)*J*eta_c*T_s + K*CRF_s*delta)/delta)
# b = Rg*P_L*T_s*(1 - eta)*dy - R_s*P_L*T_s*dy + P_L*(((x+CRF_b)*J*eta_c*T_s + K*CRF_s*delta)/delta)

# P_s = -b/a

# P_s_max = P_L*(T_L - T_s*(1 - eta))/(eta*T_s)

# plt.plot(P_s, J, label = 'P_L = 100 kW')
# plt.axvline(x = P_s_max)
plt.axhline(y = 23000)
plt.axvline(x = P_L*(1 + (delta/(0.5*eta_c*T_s))))
plt.xlabel('Solar Capacity (in kW)')
plt.ylabel('Initial Cost of Battery per unit capacity (in Rs./kWh)')
plt.legend()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = 0.012
CRF_b = 0.15
CRF_s = 0.11
Rg = np.linspace(11,40,30)
eta_c = 0.9
eta_dc = 0.95
eta = eta_c * eta_dc
T_s = 5
dy = 300
delta = 0.9
K = 35000
P_L = 40
T_L = 10
R_s = CRF_s*K/(dy*T_s)



# R_b = ((CRF_b + x)*J*eta_c*T_s + delta*CRF_s*K)/(eta*delta*dy*T_s)
# print(R_b)



# a = Rg*eta*T_s*dy - (((x+CRF_b)*J*eta_c*T_s + K*CRF_s*delta)/delta)
# b = Rg*P_L*T_s*(1 - eta)*dy - R_s*P_L*T_s*dy + P_L*(((x+CRF_b)*J*eta_c*T_s + K*CRF_s*delta)/delta)

J = delta*(eta*Rg*T_s*dy - CRF_s*K)/(eta_c*T_s*(CRF_b + x))
plt.plot(Rg, J)
plt.xlabel('Rg (in Rs.)')
plt.ylabel('Initial Cost of Battery per unit capacity (in Rs./kWh)')
plt.show()



"""# **`Plotting R_b vs J and R_b vs T_s`**"""

# R_b = (x+CRF)*((J*eta_c*T_s/delta) + K)/(dy*eta*T_s)
R_b = ((CRF_b + x)*J*eta_c*T_s + delta*CRF_s*K)/(eta*delta*dy*T_s)
print(R_b)

import numpy as np
import matplotlib.pyplot as plt
x = 0.012
CRF_b = 0.15
CRF_s = 0.11
Rg = 40
eta_c = 0.9
eta_dc = 0.95
eta = eta_c * eta_dc
T_s = np.linspace(3,7,10)
dy = 300
J = 20000
delta = 0.9
K = 35000
P_L = 40
R_s = CRF_s*K/(dy*T_s)

R_b = ((CRF_b + x)*J*eta_c*T_s + delta*CRF_s*K)/(eta*delta*dy*T_s)
plt.plot(T_s, R_b)
plt.xlabel('Solar Duration (in hrs/day)')
plt.ylabel('Cost of Storage R_b (in Rs./kWh)')
plt.show()

x = 0.012
CRF = 0.15
Rg = 40
eta_c = 0.9
eta_dc = 0.95
eta = eta_c * eta_dc
T_s = 4.5
dy = 300
J = np.linspace(10000,40000,20)
delta = 0.9
K = 35000
P_L = 40
R_s = 0.11*K/(dy*T_s)

R_b = ((CRF_b + x)*J*eta_c*T_s + delta*CRF_s*K)/(eta*delta*dy*T_s)
plt.plot(J, R_b)
plt.xlabel('Initial Cost of Battery J (in Rs./kWh)')
plt.ylabel('Cost of Storage R_b (in Rs./kWh)')
plt.show()



"""# **Calculating NPV and PP for the Setup**"""

#Calculating Payback Period for the Setup
import numpy as np

#Values
x = 0.012
Rg = 12
eta_c = 0.9
eta_dc = 0.95
eta = eta_c * eta_dc
T_s = 5
dy = 300
J = 20000
delta = 0.9
K = 35000
P_L = 40
d = 0.1

#Calculation
P_s = np.linspace(56,80,25) #Various Solar Capacities
C_b = (P_s - P_L)*T_s*eta_c/delta #Corresponding Battery Capacities
R_n = Rg*T_s*(P_L*(1 - eta) + eta*P_s)*dy - x*J*C_b #Annual Revenue

phi_pb = R_n / (J*C_b + K*P_s) #CRF

t_pb = np.log(phi_pb/(phi_pb - d))/np.log(1 + d)

#Plotting Payback Period against P_s
import matplotlib.pyplot as plt

plt.plot(P_s, t_pb)
plt.xlabel('Solar Capacity (in kW)')
plt.ylabel('Payback Period (in years)')
plt.show()

#Calculating NPV

#Values
x = 0.012
Rg = 40
eta_c = 0.9
eta_dc = 0.95
eta = eta_c * eta_dc
T_s = 5
dy = 300
J = 20000
delta = 0.9
K = 35000
P_L = 40
d = 0.1

n = 10

#Calculation
P_s = np.linspace(56,80,25) #Various Solar Capacities
C_b = (P_s - P_L)*T_s*eta_c/delta #Corresponding Battery Capacities
R_n = Rg*T_s*(P_L*(1 - eta) + eta*P_s)*dy - x*J*C_b #Annual Revenue

phi = d*((1+d)**n)/((1+d)**n - 1) #CRF

NPV = -(J*C_b + K*P_s) + (R_n/phi)

#Plotting NPV against P_s
plt.plot(P_s, NPV)
plt.xlabel('Solar Capacity (in kW)')
plt.ylabel('NPV (in Rs.)')
plt.show()